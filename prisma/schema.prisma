generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  BUYER
  SELLER
  ADMIN
  USER
  SUPER_ADMIN
  AGENT
}

enum SellerVerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum SubscriptionType {
  FREE
  BASIC
  PREMIUM
}

enum NewsCategory {
  GENERAL
  REAL_ESTATE
  TECHNOLOGY
  LIFESTYLE
  BUSINESS
}

enum PropertyCategory {
  RESIDENTIAL
  COMMERCIAL
  INDUSTRIAL
  LAND
  OTHER
}

model User {
  id              String      @id @default(uuid())
  image           String
  name            String
  email           String      @unique
  password        String
  language        String
  accountType     AccountType @default(USER)
  isEmailVerified Boolean
  otpCode         String
  otpExpireTime   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  savedProperties PropertySaved[]
  seller          Seller?

  @@index([email], name: "idx_user_email")
}

model Seller {
  id                 String                   @id @default(uuid())
  userId             String                   @unique
  verificationStatus SellerVerificationStatus @default(PENDING)
  companyName        String
  subscriptionType   SubscriptionType         @default(FREE)
  companyWebsite     String
  phone              Int
  address            String
  country            String
  state              String
  city               String
  zip                String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property[]

  @@index([userId], name: "idx_seller_userId")
}

model Property {
  id          String           @id @default(uuid())
  sellerId    String
  images      String[]
  title       String
  category    PropertyCategory
  description String
  views       Int
  price       Float
  features    String[]
  address     String
  state       String
  city        String
  zip         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  seller  Seller          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  savedBy PropertySaved[]
}

model PropertySaved {
  id         String @id @default(uuid())
  propertyId String
  userId     String

  property Property @relation(fields: [propertyId], references: [id])
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([propertyId, userId])
}

model News {
  id               String       @id @default(uuid())
  title            String
  thumbnail        String
  location         String
  content          Json
  category         NewsCategory
  isPublished      Boolean      @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id      String  @id @default(uuid())
  name    String
  email   String
  country String
  phone   Int
  message String
  isRead  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
